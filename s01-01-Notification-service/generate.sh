#!/usr/local/bin/bash

#Run project using bash 5 above. E.g. [bash ./generate.sh]
clear
core_package_root="com.cv.s01coreservice"
pojo_package_root="com.cv.s0202uamservicepojo"
module_package_root="com.cv.s0204uamservice"
module_package_folder_root="src/main/java/com/cv/s0204uamservice"
moduleName="permission"
clear
echo "================================================================================================================="
echo "Selected Module Name: $moduleName"
echo "================================================================================================================="

#Repository
echo "package $module_package_root.repository;import $core_package_root.repository.generic.GenericRepository;import $core_package_root.repository.generic.GenericSpecification;import $pojo_package_root.entity.${moduleName^};import org.springframework.data.jpa.repository.JpaRepository;import org.springframework.data.jpa.repository.JpaSpecificationExecutor;import org.springframework.stereotype.Repository;@Repository public interface ${moduleName^}Repository extends GenericRepository, GenericSpecification<${moduleName^}>,        JpaRepository<${moduleName^}, String>, JpaSpecificationExecutor<${moduleName^}> {}" >"$module_package_folder_root/repository/${moduleName^}Repository.java"
#Mapper
echo "package $module_package_root.service.mapper;import $core_package_root.service.mapper.generic.GenericMapper;import $pojo_package_root.dto.RoleDto;import $pojo_package_root.entity.Role;import org.mapstruct.Mapper;@Mapper(componentModel = \"spring\")public interface ${moduleName^}Mapper extends GenericMapper<${moduleName^}Dto, ${moduleName^}> {}" >"$module_package_folder_root/service/mapper/${moduleName^}Mapper.java"
#Interface
echo "package $module_package_root.service.intrface;import $core_package_root.service.intrface.generic.GenericService;import $pojo_package_root.dto.${moduleName^}Dto;public interface ${moduleName^}Service extends GenericService<${moduleName^}Dto> {}" >"$module_package_folder_root/service/intrface/${moduleName^}Service.java"
#Implementation
echo "package $module_package_root.service.implementation;import $core_package_root.constant.ApplicationConstant;import $core_package_root.dto.PaginationDto;import $core_package_root.exception.ExceptionComponent;import $core_package_root.service.function.StaticFunction;import $core_package_root.util.StaticUtil;import $pojo_package_root.dto.${moduleName^}Dto;import $pojo_package_root.entity.${moduleName^};import $module_package_root.constant.UAMConstant;import $module_package_root.repository.${moduleName^}Repository;import $module_package_root.service.intrface.${moduleName^}Service;import $module_package_root.service.mapper.${moduleName^}Mapper;import jakarta.transaction.Transactional;import lombok.AllArgsConstructor;import org.springframework.beans.BeanUtils;import org.springframework.cache.annotation.CacheConfig;import org.springframework.cache.annotation.CacheEvict;import org.springframework.cache.annotation.Cacheable;import org.springframework.data.domain.Page;import org.springframework.stereotype.Service;import java.util.Map;import java.util.stream.Collectors;@Service@AllArgsConstructor@CacheConfig(cacheNames = UAMConstant.APP_NAVIGATION_API_${moduleName^^})@Transactional(rollbackOn = Exception.class)public class ${moduleName^}ServiceImplementation implements ${moduleName^}Service {    private final ${moduleName^}Repository repository;    private final ${moduleName^}Mapper mapper;    private final ExceptionComponent exceptionComponent;    @CacheEvict(keyGenerator = \"cacheKeyGenerator\", allEntries = true)    @Override    public ${moduleName^}Dto create(${moduleName^}Dto dto) throws Exception {        return mapper.toDto(repository.save(mapper.toEntity(dto)));    }    @CacheEvict(keyGenerator = \"cacheKeyGenerator\", allEntries = true)    @Override    public ${moduleName^}Dto update(${moduleName^}Dto dto) throws Exception {        return mapper.toDto(repository.findById(dto.getId()).map(entity -> {            BeanUtils.copyProperties(dto, entity);            repository.save(entity);            return entity;        }).orElseThrow(() -> exceptionComponent.expose(\"app.code.004\", true)));    }    @CacheEvict(keyGenerator = \"cacheKeyGenerator\", allEntries = true)    @Override    public Boolean updateStatus(String id, boolean status) throws Exception {        return repository.findById(id).map(entity -> {            entity.setStatus(status);            repository.save(entity);            return true;        }).orElseThrow(() -> exceptionComponent.expose(\"app.code.004\", true));    }    @Cacheable(keyGenerator = \"cacheKeyGenerator\")    @Override    public ${moduleName^}Dto readOne(String id) throws Exception {        return mapper.toDto(repository.findByIdAndStatus(id, ApplicationConstant.APPLICATION_STATUS_ACTIVE, ${moduleName^}.class)                .orElseThrow(() -> exceptionComponent.expose(\"app.code.004\", true)));    }    @CacheEvict(keyGenerator = \"cacheKeyGenerator\", allEntries = true)    @Override    public Boolean delete(String id) throws Exception {        repository.deleteById(id);        return true;    }    @Cacheable(keyGenerator = \"cacheKeyGenerator\")    @Override    public PaginationDto readAll(PaginationDto dto) throws Exception {        Page<${moduleName^}> page;        if (StaticUtil.isSearchRequest(dto.getSearchField(), dto.getSearchValue())) {            page = repository.findAll(                    repository.searchSpec(dto.getSearchField(), dto.getSearchValue()),                    StaticFunction.generatePageRequest.apply(dto));        } else {            page = repository.findAll(StaticFunction.generatePageRequest.apply(dto));        }        dto.setTotal(page.getTotalElements());        dto.setResult(page.stream().map(mapper::toDto).collect(Collectors.toList()));        return dto;    }    @Cacheable(keyGenerator = \"cacheKeyGenerator\")    @Override    public Map<String, String> readIdAndNameMap() throws Exception {        return repository.findAllByStatus(ApplicationConstant.APPLICATION_STATUS_ACTIVE, ${moduleName^}.class)                .stream().collect(Collectors.toMap(${moduleName^}::getId, ${moduleName^}::getName));    }}" >"$module_package_folder_root/service/implementation/${moduleName^}ServiceImplementation.java"
#Controller
echo "package $module_package_root.controller;import $core_package_root.constant.ApplicationConstant;import $core_package_root.controller.generic.GenericController;import $core_package_root.dto.PaginationDto;import $core_package_root.enumeration.APIResponseType;import $pojo_package_root.dto.${moduleName^}Dto;import $module_package_root.constant.UAMConstant;import $module_package_root.service.intrface.${moduleName^}Service;import $module_package_root.util.StaticUtil;import jakarta.validation.Valid;import lombok.AllArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.exception.ExceptionUtils;import org.springframework.http.ResponseEntity;import org.springframework.validation.BindingResult;import org.springframework.web.bind.annotation.*;@RestController@RequestMapping(UAMConstant.APP_NAVIGATION_API_${moduleName^^})@AllArgsConstructor@Slf4j public class ${moduleName^}Controller implements GenericController<${moduleName^}Dto> {    private ${moduleName^}Service service;    @PostMapping    @Override    public ResponseEntity<Object> create(@RequestBody @Valid ${moduleName^}Dto dto, BindingResult result) {        try {            if (result.hasErrors()) {                log.info(\"${moduleName^}Controller.create {}\", result.getAllErrors());                return StaticUtil.getFailureResponse(result);            }            return StaticUtil.getSuccessResponse(service.create(dto), APIResponseType.OBJECT_ONE);        } catch (Exception e) {            log.error(\"${moduleName^}Controller.create {}\", ExceptionUtils.getStackTrace(e));            return StaticUtil.getFailureResponse(e);        }    }    @PutMapping    @Override    public ResponseEntity<Object> update(@RequestBody @Valid ${moduleName^}Dto dto, BindingResult result) {        try {            if (result.hasErrors()) {                log.info(\"${moduleName^}Controller.update {}\", result.getAllErrors());                return StaticUtil.getFailureResponse(result);            }            return StaticUtil.getSuccessResponse(service.update(dto), APIResponseType.OBJECT_ONE);        } catch (Exception e) {            log.error(\"${moduleName^}Controller.update {}\", ExceptionUtils.getStackTrace(e));            return StaticUtil.getFailureResponse(e);        }    }    @GetMapping(ApplicationConstant.APP_NAVIGATION_METHOD_UPDATE_STATUS)    @Override    public ResponseEntity<Object> updateStatus(@RequestParam String id, @RequestParam boolean status) {        try {            return StaticUtil.getSuccessResponse(service.updateStatus(id, status), APIResponseType.OBJECT_ONE);        } catch (Exception e) {            log.error(\"${moduleName^}Controller.updateStatus {}\", ExceptionUtils.getStackTrace(e));            return StaticUtil.getFailureResponse(e);        }    }    @GetMapping    @Override    public ResponseEntity<Object> readOne(@RequestParam String id) {        try {            log.info(\"${moduleName^}Controller.readOne {}\", id);            return StaticUtil.getSuccessResponse(service.readOne(id), APIResponseType.OBJECT_ONE);        } catch (Exception e) {            log.error(\"${moduleName^}Controller.readOne {}\", ExceptionUtils.getStackTrace(e));            return StaticUtil.getFailureResponse(e);        }    }    @PostMapping(ApplicationConstant.APP_NAVIGATION_METHOD_READ_PAGE)    @Override    public ResponseEntity<Object> readPage(@RequestBody PaginationDto dto) {        try {            return StaticUtil.getSuccessResponse(service.readAll(dto), APIResponseType.OBJECT_LIST);        } catch (Exception e) {            log.error(\"${moduleName^}Controller.readPage {}\", ExceptionUtils.getStackTrace(e));            return StaticUtil.getFailureResponse(e);        }    }    @GetMapping(ApplicationConstant.APP_NAVIGATION_METHOD_READ_ID_NAME_MAP)    @Override    public ResponseEntity<Object> readIdNameMapping(@RequestParam String id) {        try {            return StaticUtil.getSuccessResponse(service.readIdAndNameMap(), APIResponseType.OBJECT_ONE);        } catch (Exception e) {            log.error(\"${moduleName^}Controller.readIdNameMapping {}\", ExceptionUtils.getStackTrace(e));            return StaticUtil.getFailureResponse(e);        }    }    @DeleteMapping    @Override    public ResponseEntity<Object> delete(@RequestParam String id) {        try {            return StaticUtil.getSuccessResponse(service.delete(id), APIResponseType.OBJECT_ONE);        } catch (Exception e) {            log.error(\"${moduleName^}Controller.delete {}\", ExceptionUtils.getStackTrace(e));            return StaticUtil.getFailureResponse(e);        }    }}" >"$module_package_folder_root/controller/${moduleName^}Controller.java"
echo "Base Files Created Successfully!"
